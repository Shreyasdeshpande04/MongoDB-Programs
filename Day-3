---

## üìò Cursor Methods

### 1Ô∏è‚É£ `count()`

// Counts the number of documents that match a query

**Syntax:**
db.collection.find(query).count()

**Example:**
db.students.find({ age: { \$gte: 20 } }).count()
// Counts how many students are 20 years or older

---

### 2Ô∏è‚É£ `limit(n)`

// Restricts the number of documents returned

**Syntax:**
db.collection.find(query).limit(n)

**Example:**
db.students.find().limit(5)
// Returns only the first 5 student documents

---

### 3Ô∏è‚É£ `skip(n)`

// Skips a specific number of documents in the result

**Syntax:**
db.collection.find(query).skip(n)

**Example:**
db.students.find().skip(5)
// Skips the first 5 documents and shows the rest

---

### 4Ô∏è‚É£ `sort({ field: 1 / -1 })`

// Sorts documents in ascending (1) or descending (-1) order

**Syntax:**
db.collection.find(query).sort({ field: 1 })   // Ascending
db.collection.find(query).sort({ field: -1 })  // Descending

**Example:**
db.students.find().sort({ age: -1 })
// Sorts students by age in descending order (oldest first)

---

## üß© Element Operators

### 1Ô∏è‚É£ `$exists`

// Checks whether a field exists in the document

**Syntax:**
db.collection.find({ field: { \$exists: true/false } })

**Example:**
db.students.find({ email: { \$exists: true } })
// Finds all students who have an "email" field

---

### 2Ô∏è‚É£ `$type`

// Matches documents based on the BSON type of a field

**Syntax:**
db.collection.find({ field: { \$type: "<dataType>" } })

**Example:**
db.products.find({ price: { \$type: "number" } })
// Finds all products where "price" is stored as a number

---

### 3Ô∏è‚É£ `$size`

// Matches arrays with the specified number of elements

**Syntax:**
db.collection.find({ arrayField: { \$size: n } })

**Example:**
db.users.find({ cart: { \$size: 3 } })
// Finds users whose "cart" array contains exactly 3 items

---
